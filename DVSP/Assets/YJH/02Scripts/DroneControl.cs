using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DroneControl : MonoBehaviour
{
    public float upPower = 3;
    public float movePower = 1;
    Rigidbody rb;

    public bool isHobering = false;
    float swing = 0.1f;
    public Transform[] pos;

    float hoverY;
    float droneWeight;
    void Start()
    {
        rb = GetComponent<Rigidbody>();
        //ï¿½ï¿½ï¿½ï¿½ï¿? ï¿½ï¿½ï¿½ï¿½ 
        droneWeight = rb.mass * Physics.gravity.magnitude; //  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ = ï¿½ï¿½ï¿½ï¿½ x ï¿½ß·ï¿½ ï¿½ï¿½ï¿½Óµï¿½  / ï¿½ï¿½ Å©ï¿½ï¿½? 
    }
    void Update()
    {
        UpandDown();
        Ctrl4Way();
        //ï¿½Â¿ï¿½È¸ï¿½ï¿½

        //È£ï¿½ï¿½ï¿½ï¿½ 
        Hovering();
        //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
        Balancing();

    }

    void UpandDown()
    {
        //ï¿½ï¿½ ï¿½Æ·ï¿½
        if (Input.GetKey(KeyCode.I))
        {
            for (int i = 0; i < pos.Length; i++)
            {
                rb.AddForceAtPosition(pos[i].up * upPower, pos[i].position); //  4ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
            }
        }
        else if (Input.GetKey(KeyCode.K))
        {
            for (int i = 0; i < pos.Length; i++)
            {
                rb.AddForceAtPosition(-pos[i].up * upPower * 0.1f, pos[i].position); //  4ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
            }
        }
    }//ï¿½ï¿½ï¿½Æ·ï¿½

    void Ctrl4Way()
    {
        //ï¿½Õµï¿½
        if (Input.GetKeyDown(KeyCode.W))
        {
            rb.AddForceAtPosition(pos[0].up * movePower, pos[0].position);
            rb.AddForceAtPosition(pos[1].up * movePower, pos[1].position);

            rb.AddForceAtPosition(pos[2].up * (movePower - 0.1f), pos[2].position);
            rb.AddForceAtPosition(pos[3].up * (movePower - 0.1f), pos[3].position);
        }
        else if (Input.GetKeyDown(KeyCode.S))
        {
            rb.AddForceAtPosition(pos[2].up * movePower, pos[2].position);
            rb.AddForceAtPosition(pos[3].up * movePower, pos[3].position);

            rb.AddForceAtPosition(pos[1].up * (movePower - 0.1f), pos[0].position);
            rb.AddForceAtPosition(pos[0].up * (movePower - 0.1f), pos[1].position);
        }

        //ï¿½Â¿ï¿½
        if (Input.GetKeyDown(KeyCode.A))
        {
            rb.AddForceAtPosition(pos[1].up * movePower, pos[1].position);
            rb.AddForceAtPosition(pos[2].up * movePower, pos[2].position);

            rb.AddForceAtPosition(pos[3].up * (movePower - 0.1f), pos[3].position);
            rb.AddForceAtPosition(pos[0].up * (movePower - 0.1f), pos[0].position);
        }
        else if (Input.GetKeyDown(KeyCode.D))
        {
            rb.AddForceAtPosition(pos[3].up * movePower, pos[3].position);
            rb.AddForceAtPosition(pos[0].up * movePower, pos[0].position);

            rb.AddForceAtPosition(pos[1].up * (movePower - 0.1f), pos[1].position);
            rb.AddForceAtPosition(pos[2].up * (movePower - 0.1f), pos[2].position);
        }
    }//ï¿½Õµï¿½ï¿½Â¿ï¿½

    void Hovering()
    {
        if (Input.GetKeyDown(KeyCode.H))
        {
            if (!isHobering)
            {
                //È£ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿? 
                isHobering = !isHobering;
                hoverY = transform.position.y;// ï¿½ï¿½Æ°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½               
                //StartCoroutine(Hover());
            }
            else
            {
                isHobering = !isHobering;
                //È£ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿? ï¿½ï¿½ï¿½ï¿½
                //StopCoroutine(Hover());
            }
        }

        //È£ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½å¿? ï¿½ï¿½ï¿½ï¿½
        if (isHobering)
        {
            //È£ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Ï¶ï¿½ï¿½ï¿? ï¿½ï¿½ï¿? ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ® ï¿½Õ¼ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ 
            if (hoverY > transform.position.y) // hoverï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½, ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ã¶ó°¡±ï¿½
            {
                print("up");
                for (int i = 0; i < pos.Length; i++)
                {
                    rb.AddForceAtPosition(pos[i].up * droneWeight * 0.25f, pos[i].position);// 4ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ß·ï¿½ 4ï¿½ï¿½ï¿½ï¿½ 1ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ã¶ó°¡°ï¿½ ï¿½ï¿½. 
                }
            }
        }
        else
        {

        }



    }// È£ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Æ° 


    IEnumerator Hover()
    {
        while (isHobering)
        {
            for (int j = 0; j < 10; j++)
            {
                for (int i = 0; i < pos.Length; i++)
                {
                    rb.AddForceAtPosition(pos[i].up * upPower, pos[i].position); //  4ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
                }
            }
            yield return new WaitForSeconds(swing);

        }
        print("end");
    }

    void Balancing()
    {
        if (transform.rotation.x >= 0 || transform.rotation.z >= 0)//ï¿½ï¿½ï¿½ï¿½ï¿? ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Õ´Ù¸ï¿½
        {
            // ï¿½ß½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ö´ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½Ø´ï¿½.
            for (int i = 0; i < pos.Length; i++)
            {
                if (pos[i].position.y < transform.position.y - 0.1f) // ï¿½ß½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ y ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
                {
                    print("ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½");
                    rb.AddForceAtPosition(pos[i].up * droneWeight * 0.25f, pos[i].position); //ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 
                }
            }
        }
    }
}